function LoginController(e,n,r){e.login=function(o,t){n.login(o,t).then(function(o){e.$emit("login",o.data),r.url("/")})}}function PostsController(e,o){!function t(){o.fetch().then(function(o){e.posts=o.data?o.data:[]},function(o){});e.addPost=function(){e.body&&o.create({body:e.body}).then(function(o){e.posts.unshift(o.data),e.body=null},function(o){console.log(o)})};e.removePost=function(){o.remove({id:this.post._id}).then(function(o){t()},function(o){console.log(o)})}}()}function RegisterController(e,n,r){e.createUser=function(o,t){n.createUser(o,t).then(function(o){e.$emit("login",o.data),r.url("/")})}}LoginController.$inject=["$scope","UserService","$location"],PostsController.$inject=["$scope","PostsService"],RegisterController.$inject=["$scope","UserService","$location"],angular.module("app",["ngRoute"]).config(["$locationProvider",function(o){o.hashPrefix("")}]),angular.module("app").controller("ApplicationController",["$scope",function(e){e.$on("login",function(o,t){e.currentUser=t})}]),angular.module("app").controller("LoginController",LoginController),angular.module("app").controller("PostsController",PostsController),angular.module("app").service("PostsService",["$http",function(t){this.fetch=function(){return t({method:"GET",url:"http://localhost:3000/api/posts"})},this.create=function(o){return t({url:"/api/posts",method:"POST",data:o})},this.remove=function(o){return t({url:"/api/removePost",method:"POST",data:o})}}]),angular.module("app").controller("RegisterController",RegisterController),angular.module("app").config(["$routeProvider","$locationProvider",function(o,t){o.when("/",{controller:"PostsController",templateUrl:"posts.html"}).when("/register",{controller:"RegisterController",templateUrl:"register.html"}).when("/login",{controller:"LoginController",templateUrl:"login.html"})}]),angular.module("app").service("UserService",["$http",function(e){var n=this;this.getUser=function(){return e({url:"/api/users",method:"GET"})},this.login=function(o,t){return e({url:"/api/sessions",method:"POST",data:{username:o,password:t}}).then(function(o){return n.token=o.data,e.defaults.headers.common["X-Auth"]=o.data,n.getUser()})},this.createUser=function(o,t){return e({url:"/api/users",method:"POST",data:{username:o,password:t}}).then(function(){return n.login(o,t)})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
