function LoginController(n,e){n.login=function(o,t){e.login(o,t).then(function(o){n.$emit("login",o.data)})}}function PostsController(n,o){!function t(){o.fetch().then(function(o){n.posts=o.data?o.data:[]},function(o){});n.addPost=function(){n.body&&o.create({username:"sampleUser",body:n.body}).then(function(o){n.posts.unshift(o.data),n.body=null},function(o){console.log(o)})};n.removePost=function(){o.remove({id:this.post._id}).then(function(o){t()},function(o){console.log(o)})}}()}LoginController.$inject=["$scope","UserService"],PostsController.$inject=["$scope","PostsService"],angular.module("app",["ngRoute"]).config(["$locationProvider",function(o){o.hashPrefix("")}]),angular.module("app").controller("ApplicationController",["$scope",function(n){n.$on("login",function(o,t){n.currentUser=t})}]),angular.module("app").controller("LoginController",LoginController),angular.module("app").controller("PostsController",PostsController),angular.module("app").service("PostsService",["$http",function(t){this.fetch=function(){return t({method:"GET",url:"http://localhost:3000/api/posts"})},this.create=function(o){return console.log(o),t({url:"/api/posts",method:"POST",data:o})},this.remove=function(o){return t({url:"/api/removePost",method:"POST",data:o})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsController",templateUrl:"posts.html"}).when("/register",{controller:"RegisterController",templateUrl:"register.html"}).when("/login",{controller:"LoginController",templateUrl:"login.html"})}]),angular.module("app").service("UserService",["$http",function(n){var e=this;this.getUser=function(){return n({url:"/api/users",method:"GET",headers:{"X-Auth":this.token}})},this.login=function(o,t){return n({url:"/api/sessions",method:"POST",data:{username:o,password:t}}).then(function(o){return e.token=o.data,e.getUser()})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbnRyb2xsZXIuanMiLCJwb3N0cy5jb250cm9sbGVyLmpzIiwibW9kdWxlLmpzIiwiYXBwbGljYXRpb24uY29udHJvbGxlci5qcyIsInBvc3RzLnNlcnZpY2UuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnNlcnZpY2UuanMiXSwibmFtZXMiOlsiTG9naW5Db250cm9sbGVyIiwiJHNjb3BlIiwiVXNlclNlcnZpY2UiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwicmVzcG9uc2UiLCIkZW1pdCIsImRhdGEiLCJQb3N0c0NvbnRyb2xsZXIiLCJQb3N0c1NlcnZpY2UiLCJpbml0IiwiZmV0Y2giLCJwb3N0cyIsImVycm9yIiwiYWRkUG9zdCIsImJvZHkiLCJjcmVhdGUiLCJ1bnNoaWZ0IiwiY29uc29sZSIsImxvZyIsInJlbW92ZVBvc3QiLCJyZW1vdmUiLCJpZCIsInRoaXMiLCJwb3N0IiwiX2lkIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRsb2NhdGlvblByb3ZpZGVyIiwiaGFzaFByZWZpeCIsImNvbnRyb2xsZXIiLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwic2VydmljZSIsIiRodHRwIiwibWV0aG9kIiwidXJsIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJnZXRVc2VyIiwiaGVhZGVycyIsIlgtQXV0aCIsInRva2VuIiwidmFsIl0sIm1hcHBpbmdzIjoiQUFNQSxTQUFBQSxnQkFBQUMsRUFBQUMsR0FJQUQsRUFBQUUsTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FOLEVBQUFPLE1BQUEsUUFBQUQsRUFBQUUsU0NSQSxTQUFBQyxnQkFBQVQsRUFBQVUsSUFLQSxTQUFBQyxJQUVBRCxFQUFBRSxRQUFBUCxLQUFBLFNBQUFDLEdBQ0FOLEVBQUFhLE1BQUFQLEVBQUFFLEtBQUFGLEVBQUFFLEtBQUEsSUFDQSxTQUFBTSxNQUdBZCxFQUFBZSxRQUFBLFdBQ0FmLEVBQUFnQixNQUNBTixFQUFBTyxPQUFBLENBQ0FkLFNBQUEsYUFDQWEsS0FBQWhCLEVBQUFnQixPQUNBWCxLQUFBLFNBQUFDLEdBQ0FOLEVBQUFhLE1BQUFLLFFBQUFaLEVBQUFFLE1BQ0FSLEVBQUFnQixLQUFBLE1BRUEsU0FBQVYsR0FDQWEsUUFBQUMsSUFBQWQsTUFLQU4sRUFBQXFCLFdBQUEsV0FFQVgsRUFBQVksT0FBQSxDQUNBQyxHQUFBQyxLQUFBQyxLQUFBQyxNQUVBckIsS0FBQSxTQUFBQyxHQUNBSyxLQUVBLFNBQUFMLEdBQ0FhLFFBQUFDLElBQUFkLE1BbENBSyxzR0NQQWdCLFFBQUFDLE9BQUEsTUFBQSxDQUNBLFlBRUFDLE9BQUEsQ0FBQSxvQkFBQSxTQUFBQyxHQUNBQSxFQUFBQyxXQUFBLE9DSkFKLFFBQUFDLE9BQUEsT0FDQUksV0FBQSx3QkFBQSxDQUFBLFNBQUEsU0FBQWhDLEdBQ0FBLEVBQUFpQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQW5DLEVBQUFvQyxZQUFBRCxPSEhBUixRQUNBQyxPQUFBLE9BQ0FJLFdBQUEsa0JBQUFqQyxpQkNGQTRCLFFBQ0FDLE9BQUEsT0FDQUksV0FBQSxrQkFBQXZCLGlCR0ZBa0IsUUFDQUMsT0FBQSxPQUNBUyxRQUFBLGVBQUEsQ0FBQSxRQUFBLFNBQUFDLEdBRUFkLEtBQUFaLE1BQUEsV0FFQSxPQUFBMEIsRUFBQSxDQUNBQyxPQUFBLE1BQ0FDLElBQUEscUNBSUFoQixLQUFBUCxPQUFBLFNBQUFRLEdBRUEsT0FEQU4sUUFBQUMsSUFBQUssR0FDQWEsRUFBQSxDQUNBRSxJQUFBLGFBQ0FELE9BQUEsT0FDQS9CLEtBQUFpQixLQUdBRCxLQUFBRixPQUFBLFNBQUFDLEdBQ0EsT0FBQWUsRUFBQSxDQUNBRSxJQUFBLGtCQUNBRCxPQUFBLE9BQ0EvQixLQUFBZSxRQ3hCQUksUUFDQUMsT0FBQSxPQUNBQyxPQUFBLENBQUEsaUJBQUEsU0FBQVksR0FDQUEsRUFDQUMsS0FBQSxJQUFBLENBQUFWLFdBQUEsa0JBQUFXLFlBQUEsZUFDQUQsS0FBQSxZQUFBLENBQUFWLFdBQUEscUJBQUFXLFlBQUEsa0JBQ0FELEtBQUEsU0FBQSxDQUFBVixXQUFBLGtCQUFBVyxZQUFBLGtCQ05BaEIsUUFDQUMsT0FBQSxPQUNBUyxRQUFBLGNBQUEsQ0FBQSxRQUFBLFNBQUFDLEdBQ0EsSUFBQU0sRUFBQXBCLEtBQ0FBLEtBQUFxQixRQUFBLFdBQ0EsT0FBQVAsRUFBQSxDQUNBRSxJQUFBLGFBQ0FELE9BQUEsTUFDQU8sUUFBQSxDQUFBQyxTQUFBdkIsS0FBQXdCLFVBR0F4QixLQUFBdEIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFrQyxFQUFBLENBQ0FFLElBQUEsZ0JBQ0FELE9BQUEsT0FDQS9CLEtBQUEsQ0FBQUwsU0FBQUEsRUFBQUMsU0FBQUEsS0FFQUMsS0FBQSxTQUFBNEMsR0FFQSxPQURBTCxFQUFBSSxNQUFBQyxFQUFBekMsS0FDQW9DLEVBQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXJcbi5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJywgTG9naW5Db250cm9sbGVyKVxuXG4vKiogQG5nSW5qZWN0ICovXG5cbmZ1bmN0aW9uIExvZ2luQ29udHJvbGxlcigkc2NvcGUsVXNlclNlcnZpY2UgKSB7XG4gICAgaW5pdCgpOyBcblxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLHBhc3N3b3JkKSB7XG4gICAgICAgIFVzZXJTZXJ2aWNlLmxvZ2luKHVzZXJuYW1lLHBhc3N3b3JkKVxuICAgICAgICAudGhlbiAoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSlcbiAgICAgICAgfSlcbiAgICB9XG4gICAgfVxufVxuIiwiYW5ndWxhclxuLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0NvbnRyb2xsZXInLCBQb3N0c0NvbnRyb2xsZXIpXG5cbi8qKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIFBvc3RzQ29udHJvbGxlcigkc2NvcGUsUG9zdHNTZXJ2aWNlICkge1xuXG5pbml0KCk7XG5cblxuZnVuY3Rpb24gaW5pdCgpIHtcblxuICAgIFBvc3RzU2VydmljZS5mZXRjaCgpLnRoZW4gKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAkc2NvcGUucG9zdHMgPSByZXNwb25zZS5kYXRhID8gcmVzcG9uc2UuZGF0YSA6IFtdO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge30pXG4gIFxuXG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkc2NvcGUuYm9keSkge1xuICAgICAgICAgICBQb3N0c1NlcnZpY2UuY3JlYXRlKHsgXG4gICAgICAgICAgIHVzZXJuYW1lOiBcInNhbXBsZVVzZXJcIixcbiAgICAgICAgICAgYm9keTogJHNjb3BlLmJvZHl9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ib2R5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cbiAgICAkc2NvcGUucmVtb3ZlUG9zdCA9IGZ1bmN0aW9uKCkge1xuICAgIFxuICAgICAgICAgICBQb3N0c1NlcnZpY2UucmVtb3ZlKCB7IFxuICAgICAgICAgICAgaWQ6IHRoaXMucG9zdC5faWQgICAgICAgICAgICBcbiAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbn1cbn0iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAgICduZ1JvdXRlJ1xuXSlcbi5jb25maWcoWyckbG9jYXRpb25Qcm92aWRlcicsIGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnJyk7XG4gIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkNvbnRyb2xsZXInICwgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXyx1c2VyICkge1xuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXI9dXNlclxuICAgIH0pXG59KSIsImFuZ3VsYXJcbi5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdHNTZXJ2aWNlJywgZnVuY3Rpb24gKCRodHRwKSB7XG5cbiAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuICAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9wb3N0cydcbiAgICAgICAgfSlcblxuICAgIH1cbiAgICB0aGlzLmNyZWF0ZT0gZnVuY3Rpb24ocG9zdCkge1xuICAgICAgICBjb25zb2xlLmxvZyhwb3N0KVxuICAgICAgICByZXR1cm4gICRodHRwKHtcbiAgICAgICAgICAgIHVybDogJy9hcGkvcG9zdHMnLFxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGRhdGE6IHBvc3RcbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5yZW1vdmUgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICByZXR1cm4gICAgJGh0dHAoe1xuICAgICAgICAgICAgdXJsOiAnL2FwaS9yZW1vdmVQb3N0JyxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBkYXRhOiBpZFxuICAgIH0pfX0pIiwiYW5ndWxhclxuLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAud2hlbignLycsIHtjb250cm9sbGVyOiAnUG9zdHNDb250cm9sbGVyJywgdGVtcGxhdGVVcmw6J3Bvc3RzLmh0bWwnfSlcbiAgICAud2hlbignL3JlZ2lzdGVyJywge2NvbnRyb2xsZXI6J1JlZ2lzdGVyQ29udHJvbGxlcicsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCd9KVxuICAgIC53aGVuKCcvbG9naW4nLCB7Y29udHJvbGxlcjogJ0xvZ2luQ29udHJvbGxlcicsIHRlbXBsYXRlVXJsOidsb2dpbi5odG1sJ30pXG59KSIsImFuZ3VsYXJcbi5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHApIHtcbiAgIHZhciBzdmMgPSB0aGlzO1xuICAgdGhpcy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gICRodHRwKHtcbiAgICAgICAgICAgIHVybDogJy9hcGkvdXNlcnMnLFxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnWC1BdXRoJzp0aGlzLnRva2VufVxuICAgICAgICB9KVxuICAgIH1cbiAgIHRoaXMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUscGFzc3dvcmQpIHtcbiAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICB1cmw6ICcvYXBpL3Nlc3Npb25zJyxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgZGF0YToge3VzZXJuYW1lOnVzZXJuYW1lLCBwYXNzd29yZDpwYXNzd29yZH1cbiAgICB9KVxuICAgIC50aGVuIChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHN2Yy50b2tlbiA9IHZhbC5kYXRhXG4gICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpXG4gICAgfVxuICAgICAgIFxuICAgICAgIClcbn19KSJdfQ==
